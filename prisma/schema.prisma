generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String           @id @default(uuid())
  firstname            String
  lastname             String
  username             String           @unique
  email                String?          @unique
  emailSubscribed      Boolean?         @default(false)
  password             String
  color                String?
  role                 UserRole         @default(NEW)
  avatarUrl            String?
  resetPasswordExpires DateTime?
  resetPasswordToken   String?          @unique
  claimants            Claimant[]       @relation("UserClaimants")
  comments             Comment[]
  messages             Message[]        @relation("UserMessages")
  starred              StarredMessage[]
  survivorEntries      SurvivorEntry[]
  team                 Team?

  @@unique([firstname, lastname])
}

model Team {
  id             String              @id @default(uuid())
  name           String              @unique
  ownerId        String?             @unique
  wins           Int                 @default(0)
  losses         Int                 @default(0)
  ties           Int                 @default(0)
  points         Int                 @default(0)
  pointsAgainst  Int                 @default(0)
  streak         String              @default("W0")
  playoffSeed    Int?
  completedWeeks Int[]
  team1Matches   Match[]             @relation("Team1Matches")
  team2Matches   Match[]             @relation("Team2Matches")
  players        Player[]
  transactions   PlayerTransaction[]
  rosters        Roster[]            @relation("TeamRosters")
  owner          User?               @relation(fields: [ownerId], references: [id])
}

model Player {
  id             String               @id @default(uuid())
  name           String
  league         String
  position       String
  setPosition    String               @default("")
  teamId         String?
  lyAverage      String?
  lyGames        String?
  lyPoints       String?
  dropClaimants  Claimant[]           @relation("DropPlayer")
  team           Team?                @relation(fields: [teamId], references: [id])
  claims         PlayerClaim[]        @relation("PlayerClaims")
  transactions   PlayerTransaction[]
  rosters        Roster[]             @relation("PlayerRosters")
  survivorPicks  SurvivorPlayer[]
  survivorUsages SurvivorUsedPlayer[]
  weekLineups    SurvivorWeekLineup[]
  weekScores     WeekScore[]

  @@unique([name, league])
}

model Roster {
  id       String @id @default(uuid())
  week     Int
  position String
  playerId String
  teamId   String
  player   Player @relation("PlayerRosters", fields: [playerId], references: [id], onDelete: Cascade)
  team     Team   @relation("TeamRosters", fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([week, playerId])
}

model WeekScore {
  id       Int    @id @default(autoincrement())
  week     Int
  average  Int
  game1    Int?
  game2    Int?
  game3    Int?
  playerId String
  myTeam   String
  opponent String
  lanes    String
  player   Player @relation(fields: [playerId], references: [id])

  @@unique([playerId, week])
}

model PlayerTransaction {
  id         String   @id @default(uuid())
  action     String
  playerId   String
  playerName String
  teamId     String
  teamName   String
  timestamp  DateTime @default(now())
  player     Player   @relation(fields: [playerId], references: [id])
  team       Team     @relation(fields: [teamId], references: [id])
}

model Message {
  id         Int              @id @default(autoincrement())
  title      String
  content    String
  createdAt  DateTime         @default(now())
  authorId   String
  leagueOnly Boolean          @default(false)
  comments   Comment[]
  author     User             @relation("UserMessages", fields: [authorId], references: [id])
  starredBy  StarredMessage[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  messageId Int
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  message   Message  @relation(fields: [messageId], references: [id])
}

model StarredMessage {
  id        Int      @id @default(autoincrement())
  userId    String
  messageId Int
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, messageId])
}

model Match {
  id        String  @id @default(uuid())
  week      Int
  season    Int
  team1Id   String
  team2Id   String
  matchType String?
  team1     Team    @relation("Team1Matches", fields: [team1Id], references: [id])
  team2     Team    @relation("Team2Matches", fields: [team2Id], references: [id])

  @@index([week, season])
}

model WeekLock {
  id        String   @id @default(uuid())
  league    String
  season    Int
  week      Int
  completed String   @default("no")
  lockTime  DateTime

  @@unique([league, season, week])
}

model PlayerClaim {
  id        String     @id @default(uuid())
  playerId  String
  createdAt DateTime   @default(now())
  resolved  Boolean    @default(false)
  expiresAt DateTime
  claimants Claimant[] @relation("ClaimantsOnPlayerClaim")
  player    Player     @relation("PlayerClaims", fields: [playerId], references: [id])
}

model Claimant {
  id           String      @id @default(uuid())
  userId       String
  claimId      String
  dropPlayerId String?
  claim        PlayerClaim @relation("ClaimantsOnPlayerClaim", fields: [claimId], references: [id])
  dropPlayer   Player?     @relation("DropPlayer", fields: [dropPlayerId], references: [id])
  user         User        @relation("UserClaimants", fields: [userId], references: [id])

  @@unique([userId, claimId])
}

model SurvivorEntry {
  id              String               @id @default(uuid())
  userId          String
  league          String
  eliminated      Boolean              @default(false)
  createdAt       DateTime             @default(now())
  teamName        String
  updatedAt       DateTime             @updatedAt
  eliminatedWeek  Int?
  winnerStatus    String?
  user            User                 @relation(fields: [userId], references: [id])
  survivorPlayers SurvivorPlayer[]
  usedPlayers     SurvivorUsedPlayer[]
  weekLineups     SurvivorWeekLineup[]

  @@unique([league, teamName])
  @@unique([userId, league])
}

model SurvivorPlayer {
  id        String        @id @default(uuid())
  entryId   String
  playerId  String
  rank      Int
  createdAt DateTime      @default(now())
  entry     SurvivorEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  player    Player        @relation(fields: [playerId], references: [id])

  @@unique([entryId, playerId])
  @@unique([entryId, rank])
}

model SurvivorUsedPlayer {
  id        String        @id @default(uuid())
  entryId   String
  week      Int
  playerId  String
  createdAt DateTime      @default(now())
  entry     SurvivorEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  player    Player        @relation(fields: [playerId], references: [id])

  @@unique([entryId, week])
}

model SurvivorWeekLineup {
  id        String        @id @default(uuid())
  entryId   String
  week      Int
  playerId  String
  rank      Int
  createdAt DateTime      @default(now())
  entry     SurvivorEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  player    Player        @relation(fields: [playerId], references: [id])

  @@unique([entryId, week, playerId])
}

enum UserRole {
  SUPERADMIN
  ADMIN
  MANAGER
  MEMBER
  NEW
}
